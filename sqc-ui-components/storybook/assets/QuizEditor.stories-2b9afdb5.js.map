{"version":3,"file":"QuizEditor.stories-2b9afdb5.js","sources":["../../src/assets/svg/add.svg","../../src/assets/svg/delete.svg","../../src/components/QuizEditor/QuizEditor.tsx"],"sourcesContent":["export default \"__VITE_ASSET__543aced3__\"","export default \"__VITE_ASSET__722fb007__\"","import update from 'immutability-helper'\n\nimport { ReactComponent as AddIcon } from '../../assets/svg/add.svg'\nimport { ReactComponent as CheckedIcon } from '../../assets/svg/checked.svg'\nimport { ReactComponent as DeleteIcon } from '../../assets/svg/delete.svg'\nimport { ReactNode } from 'react'\nimport { Choice, Question, createChoice } from 'sqc-core-functions'\nimport { Editor } from '../Editor'\n\nexport type QuizEditorParams = {\n  /** The quiz question object */\n  question: Question\n  /** Whether richtext mode is enabled */\n  richtextMode?: boolean\n  /** Function to handle any changes on the question, including adding/editing/removing answers */\n  onChange: (question: Question) => void\n  /** Warning message component to display */\n  warning?: ReactNode\n}\n\nconst isAnswerTogglable = (answer: Choice) => answer.isCorrect\n\n/**\n * Renders a QuizEditor component with question, answers, and warning.\n */\nexport const QuizEditor = ({ question, richtextMode, onChange, warning }: QuizEditorParams) => {\n  const isAnswerNonRemovable = (answer: Choice) => question.choices.length < 2 || answer.isCorrect\n\n  const handleQuestionUpdate = (value: string) => {\n    onChange({\n      ...question,\n      question: value,\n    })\n  }\n  const handleAnswerUpdate = (index: number, value: string) => {\n    onChange(update(question, { choices: { [index]: { answer: { $set: value } } } }))\n  }\n  const handleAddAnswer = (index: number) => {\n    onChange(\n      update(question, {\n        choices: {\n          $splice: [[index + 1, 0, createChoice()]],\n        },\n      })\n    )\n  }\n  const handleRemoveAnswer = (index: number) => {\n    onChange(update(question, { choices: { $splice: [[index, 1]] } }))\n  }\n  const handleToggleAnswer = (choice: Choice) => {\n    onChange(\n      update(question, {\n        choices: {\n          $apply: (x: Choice[]): Choice[] =>\n            x.map((c) => ({\n              ...c,\n              isCorrect: c.id === choice.id,\n            })),\n        },\n      })\n    )\n  }\n\n  return (\n    <div key={question.id}>\n      <h2 className='mb-2 text-xl font-semibold'>Question:</h2>\n      <Editor value={question.question} onChange={handleQuestionUpdate} richtextMode={richtextMode} />\n      {warning}\n      <h2 className='my-2 text-xl font-semibold'>Answers:</h2>\n      {question.choices.map((choice, index) => (\n        <div key={choice.id}>\n          <h3 className='mb-2 font-semibold text-l'>\n            Answer {index + 1}: {choice.isCorrect && <span className='text-emerald-500'>Correct</span>}\n          </h3>\n          <div className='relative mb-6'>\n            <div className='absolute inset-y-0 left-0 flex flex-col items-center justify-center gap-2 pl-3'>\n              <button\n                type='button'\n                role='toggle-answer'\n                aria-disabled={isAnswerTogglable(choice)}\n                disabled={isAnswerTogglable(choice)}\n                className='text-slate-400 hover:rounded-lg hover:border hover:bg-emerald-200 disabled:cursor-not-allowed disabled:bg-transparent disabled:text-emerald-400'\n                onClick={() => handleToggleAnswer(choice)}\n              >\n                <CheckedIcon className='w-8 h-8' fill='currentColor' />\n                <span className='sr-only'>Mark as correct answer</span>\n              </button>\n              <button\n                type='button'\n                role='remove-answer'\n                aria-disabled={isAnswerNonRemovable(choice)}\n                disabled={isAnswerNonRemovable(choice)}\n                className='text-red-400 hover:rounded-lg hover:border hover:bg-red-200 disabled:cursor-not-allowed disabled:bg-transparent'\n                onClick={() => handleRemoveAnswer(index)}\n              >\n                <DeleteIcon className='w-8 h-8' fill='currentColor' />\n                <span className='sr-only'>Remove this answer</span>\n              </button>\n              <button\n                type='button'\n                role='add-answer'\n                onClick={() => handleAddAnswer(index)}\n                className='text-blue-400 hover:rounded-lg hover:border hover:bg-blue-200'\n              >\n                <AddIcon className='w-8 h-8' fill='currentColor' />\n                <span className='sr-only'>Add an answer after</span>\n              </button>\n            </div>\n            <div className='block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 pl-14 lg:py-5'>\n              <Editor\n                value={choice.answer}\n                onChange={(val) => handleAnswerUpdate(index, val)}\n                richtextMode={richtextMode}\n              />\n              {warning}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n"],"names":["SvgAdd","props","React.createElement","SvgDelete","isAnswerTogglable","answer","QuizEditor","question","richtextMode","onChange","warning","isAnswerNonRemovable","handleQuestionUpdate","value","handleAnswerUpdate","index","update","handleAddAnswer","createChoice","handleRemoveAnswer","handleToggleAnswer","choice","x","c","jsxs","jsx","Editor","CheckedIcon","DeleteIcon","AddIcon","val"],"mappings":"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"}